{"version":3,"sources":["scream.js"],"names":[],"mappings":"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","file":"scream.js","sourcesContent":["import Sister from 'sister';\r\nimport OrientationChangeEnd from 'orientationchangeend';\r\n\r\nconst OCE = OrientationChangeEnd();\r\n\r\ntype ConfigType = {\r\n    width: {\r\n        portrait: ?number,\r\n        landscape: ?number\r\n    }\r\n};\r\n\r\nexport default (config: ConfigType = {}): Object => {\r\n    const scream = {};\r\n    const eventEmitter = Sister();\r\n\r\n    config.width = config.width || {};\r\n\r\n    if (!config.width.portrait) {\r\n        config.width.portrait = window.screen.width;\r\n    }\r\n\r\n    if (!config.width.landscape) {\r\n        config.width.landscape = window.screen.width;\r\n    }\r\n\r\n    /**\r\n     * Viewport width relative to the device orientation.\r\n     */\r\n    scream.getViewportWidth = (): number => {\r\n        return config.width[scream.getOrientation()];\r\n    };\r\n\r\n    /**\r\n     * Viewport height relative to the device orientation and to scale with the viewport width.\r\n     */\r\n    scream.getViewportHeight = (): number => {\r\n        return Math.round(scream.getScreenHeight() / scream.getScale());\r\n    };\r\n\r\n    /**\r\n     * The ratio between screen width and viewport width.\r\n     */\r\n    scream.getScale = (): number => {\r\n        return scream.getScreenWidth() / scream.getViewportWidth();\r\n    };\r\n\r\n    const OrientationType = 'portrait' | 'landscape';\r\n\r\n    scream.getOrientation = (): OrientationType => {\r\n        return window.orientation === 0 || window.orientation === 180 ? 'portrait' : 'landscape';\r\n    };\r\n\r\n    /**\r\n     * Screen width relative to the device orientation.\r\n     */\r\n    scream.getScreenWidth = (): number => {\r\n        return window.screen[scream.getOrientation() === 'portrait' ? 'width' : 'height'];\r\n    };\r\n\r\n    /**\r\n     * Screen width relative to the device orientation.\r\n     */\r\n    scream.getScreenHeight = (): number => {\r\n        return window.screen[scream.getOrientation() === 'portrait' ? 'height' : 'width'];\r\n    };\r\n\r\n    /**\r\n     * Generates a viewport tag reflecting the content width relative to the device orientation\r\n     * and scale required to fit the content in the viewport.\r\n     *\r\n     * Appends the tag to the document.head and removes the preceding additions.\r\n     */\r\n    scream.updateViewport = () => {\r\n        const width = scream.getViewportWidth();\r\n        const scale = scream.getScale();\r\n\r\n        const content =\r\n             'width=' + width +\r\n            ', initial-scale=' + scale +\r\n            ', minimum-scale=' + scale +\r\n            ', maximum-scale=' + scale +\r\n            ', user-scalable=0';\r\n\r\n        const viewport = document.createElement('meta');\r\n\r\n        viewport.name = 'viewport';\r\n        viewport.content = content;\r\n\r\n        const oldViewport = window.document.head.querySelector('meta[name=\"viewport\"]');\r\n\r\n        if (oldViewport) {\r\n            oldViewport.parentNode.removeChild(oldViewport);\r\n        }\r\n\r\n        window.document.head.appendChild(viewport);\r\n    };\r\n\r\n    /**\r\n     * @property 0 window.innerWidth when device is in a portrait orientation, scale 0.25 and page is the minimal view\r\n     * @property 1 window.innerHeight when device is in a portrait orientation, scale 0.25 and page is the minimal view\r\n     * @property 2 window.innerWidth when device is in a landscape orientation, scale 0.25 and page is the minimal view\r\n     * @property 3 window.innerHeight when device is in a landscape orientation, scale 0.25 and page is the minimal view\r\n     * @property 4 screen.width\r\n     * @property 5 screen.height\r\n     * @property 6 devicePixelRatio\r\n     * @property 7 name\r\n     */\r\n    type SpecType = Array;\r\n\r\n    /**\r\n     * Uses static device environment variables (screen.width, screen.height, devicePixelRatio) to recognize device spec.\r\n     */\r\n    scream.deviceSpec = (): SpecType => {\r\n        let index,\r\n            spec;\r\n\r\n        const specs = [\r\n            [1280, 1762, 1920, 1280, 320, 480, 2, 'iPhone 4'],\r\n            [1280, 2114, 2272, 1280, 320, 568, 2, 'iPhone 5 or 5s'],\r\n\r\n            [1500, 2510, 2668, 1500, 375, 667, 2, 'iPhone 6'],\r\n            // Equivalent to iPhone 5\r\n            // [1280, 2114, 2272, 1280, 320, 568, 2, 'iPhone 6 (Zoomed)'],\r\n\r\n            [1656, 2785, 2944, 1656, 414, 736, 3, 'iPhone 6 plus'],\r\n            [1500, 2509, 2668, 1500, 375, 667, 3, 'iPhone 6 plus (Zoomed)'],\r\n\r\n            [3072, 3936, 4096, 2912, 768, 1024, 1, 'iPad 2'],\r\n            [3072, 3938, 4096, 2914, 768, 1024, 2, 'iPad Air or Retina'],\r\n\r\n            [4096, 5306, 5464, 3938, 1024, 1366, 2, 'iPad Pro']\r\n        ];\r\n\r\n        index = specs.length;\r\n\r\n        while (index--) {\r\n            if (window.screen.width === specs[index][4] &&\r\n                window.screen.height === specs[index][5] &&\r\n                window.devicePixelRatio === specs[index][6]) {\r\n                spec = specs[index];\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return spec;\r\n    };\r\n\r\n    /**\r\n     * Returns height of the usable viewport in the minimal view relative to the current viewport width.\r\n     *\r\n     * This method will work with iOS8 only.\r\n     *\r\n     * @see http://stackoverflow.com/questions/26827822/how-is-the-window-innerheight-derived-of-the-minimal-view/26827842\r\n     * @see http://stackoverflow.com/questions/26801943/how-to-get-the-window-size-of-fullscream-view-when-not-in-fullscream\r\n     */\r\n    scream.getMinimalViewHeight = (): number => {\r\n        let height;\r\n\r\n        const orientation = scream.getOrientation();\r\n        const spec = scream.deviceSpec();\r\n\r\n        if (!spec) {\r\n            throw new Error('Not a known iOS device. If you are using an iOS device, report it to https://github.com/gajus/scream/issues/1.');\r\n        }\r\n\r\n        if (orientation === 'portrait') {\r\n            height = Math.round(scream.getViewportWidth() * spec[1] / spec[0]);\r\n        } else {\r\n            height = Math.round(scream.getViewportWidth() * spec[3] / spec[2]);\r\n        }\r\n\r\n        return height;\r\n    };\r\n\r\n    type DimensionsType = {\r\n        width: number,\r\n        height: number\r\n    };\r\n\r\n    /**\r\n     * Returns dimensions of the usable viewport in the minimal view relative to the current viewport width and orientation.\r\n     */\r\n    scream.getMinimalViewSize = (): DimensionsType => {\r\n        const width = scream.getViewportWidth();\r\n        const height = scream.getMinimalViewHeight();\r\n\r\n        return {\r\n            height,\r\n            width\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns true if screen is in \"minimal\" UI.\r\n     *\r\n     * iOS 8 has removed the minimal-ui viewport property.\r\n     * Nevertheless, user can enter minimal-ui using touch-drag-down gesture.\r\n     * This method is used to detect if user is in minimal-ui view.\r\n     *\r\n     * In case of orientation change, the state of the view can be accurately\r\n     * determined only after orientationchangeend event.\r\n     */\r\n    scream.isMinimalView = (): boolean => {\r\n        // It is enough to check the height, because the viewport is based on width.\r\n        return window.innerHeight === scream.getMinimalViewSize().height;\r\n    };\r\n\r\n    /**\r\n     * Detect when view changes from full to minimal and vice-versa.\r\n     */\r\n    scream.detectViewChange = () => {\r\n        let lastView;\r\n\r\n        // This method will only with iOS 8.\r\n        // Overwrite the event handler to prevent an error.\r\n        if (!scream.deviceSpec()) {\r\n            /* eslint-disable no-console */\r\n            console.log('View change detection has been disabled. Unrecognized device. If you are using an iOS device, report it to https://github.com/gajus/scream/issues/1.');\r\n            /* eslint-enable */\r\n\r\n            return () => {};\r\n        }\r\n\r\n        return () => {\r\n            const currentView = scream.isMinimalView() ? 'minimal' : 'full';\r\n\r\n            if (lastView !== currentView) {\r\n                eventEmitter.trigger('viewchange', {\r\n                    viewName: currentView\r\n                });\r\n\r\n                lastView = currentView;\r\n            }\r\n        };\r\n    };\r\n\r\n    scream.detectViewChange = scream.detectViewChange();\r\n\r\n    scream.setupDOMEventListeners = () => {\r\n        let isOrientationChanging;\r\n\r\n        // Media matcher is the first to pick up the orientation change.\r\n        window\r\n            .matchMedia('(orientation: portrait)')\r\n            .addListener(() => {\r\n                isOrientationChanging = true;\r\n            });\r\n\r\n        OCE.on('orientationchangeend', () => {\r\n            isOrientationChanging = false;\r\n\r\n            scream.updateViewport();\r\n            scream.detectViewChange();\r\n\r\n            eventEmitter.trigger('orientationchangeend');\r\n        });\r\n\r\n        window.addEventListener('orientationchange', () => {\r\n            scream.updateViewport();\r\n        });\r\n\r\n        window.addEventListener('resize', () => {\r\n            if (!isOrientationChanging) {\r\n                scream.detectViewChange();\r\n            }\r\n        });\r\n\r\n        // iPhone 6 plus does not trigger resize event when leaving the minimal-ui in the landscape orientation.\r\n        window.addEventListener('scroll', () => {\r\n            if (!isOrientationChanging) {\r\n                scream.detectViewChange();\r\n            }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            scream.detectViewChange();\r\n        });\r\n    };\r\n\r\n    scream.updateViewport();\r\n    scream.setupDOMEventListeners();\r\n\r\n    scream.on = eventEmitter.on;\r\n    scream.off = eventEmitter.off;\r\n\r\n    return scream;\r\n};\r\n"]}